#pragma unmanaged
#include "Common.h"
int dblSpace;
char buf[131072];

TCHAR GetChar(TCHAR _char) {
	if (_char < 32)
		return '.';

	return _char;
}

char *DumpMem(unsigned char *pAddr, int len) {
	if (pAddr == nullptr) {
		return "";
	}

	if (len < 1) {
		return "";
	}

	memset(buf, 0, 16384);

	char temp[256];
	BYTE fChar;
	int i = 0;
	long bytesRead = 0;
	TCHAR line[17];
	int nSpaces = 3 * 16 + 2;
	memset(&line, 0, sizeof(line));
	int dataidx = 0;

	if (dblSpace)
		strcat(buf, "\r\n\r\n");

	for (;;) {
		// print hex address
		sprintf(temp, "%08X  ", i);
		strcat(buf, temp);

		// print first 8 bytes
		for (int j = 0; j < 0x08; j++) {
			fChar = pAddr[dataidx];
			if (dataidx >= len) break;
			dataidx++;

			sprintf(temp, "%02X ", fChar);
			strcat(buf, temp);

			// add to the ASCII text
			line[bytesRead++] = GetChar(fChar);

			// this took three characters
			nSpaces -= 3;
		}

		// print last 8 bytes - change in the "xx " to " xx" provides
		// the double space in between the first 8 and the last 8 bytes.
		for (int j = 0x08; j < 0x10; j++) {
			fChar = pAddr[dataidx];
			if (dataidx >= len) break;
			dataidx++;

			sprintf(temp, " %02X", (unsigned char)fChar);
			strcat(buf, temp);

			// add to the ASCII text
			line[bytesRead++] = GetChar(fChar);

			// this took three characters
			nSpaces -= 3;
		}

		// fill in any leftover spaces.
		for (int j = 0; j <= nSpaces; j++) {
			strcat(buf, " ");
		}

		// print ASCII text
		sprintf(temp, "%s", line);
		strcat(buf, temp);

		// quit if the file is done
		if (dataidx >= len) break;

		// new line
		strcat(buf, "\r\n");

		if (dblSpace)
			strcat(buf, "\r\n");

		// reset everything
		bytesRead = 0;
		memset(&line, 0, sizeof(line));
		i += 16;
		//dataidx++;
		nSpaces = 3 * 16 + 2;
	}

	return buf;
}

unsigned char encrBuffer[4092];
unsigned char decrBuffer[4092];

unsigned char sampEncrTable[512] =
{
	0xC8, 0x3D, 0x98, 0xA9, 0xC9, 0xEA, 0xE2, 0x32, 0x0F, 0xCE, 0x2E, 0x8B, 0x73, 0x97, 0x30, 0x4A,
	0x37, 0xA6, 0xEA, 0xDE, 0x8D, 0x83, 0x90, 0x6A, 0x69, 0xED, 0xDE, 0x56, 0x32, 0xD3, 0x3A, 0x04,
	0x28, 0x57, 0x64, 0x68, 0x1E, 0xE3, 0x51, 0x2E, 0xC1, 0x58, 0x74, 0x6D, 0x20, 0x40, 0x40, 0xBB,
	0x3B, 0x77, 0xE9, 0xC0, 0x29, 0xCC, 0xBA, 0xBC, 0xA8, 0xD2, 0xE1, 0x42, 0xFC, 0x12, 0x5B, 0xAB,
	0xBD, 0x16, 0xFB, 0x88, 0x50, 0x2D, 0xD4, 0x33, 0xF7, 0x44, 0x94, 0x65, 0x48, 0xD1, 0xAA, 0x29,
	0x56, 0x10, 0x27, 0x1A, 0x93, 0x34, 0xDF, 0x7B, 0xE5, 0x46, 0x22, 0xF7, 0x13, 0x05, 0x6D, 0x74,
	0xCB, 0x07, 0x9C, 0xF4, 0x03, 0x0E, 0x23, 0xC5, 0x2A, 0xAE, 0xE3, 0x37, 0xBB, 0x4D, 0x35, 0x08,
	0xD5, 0xC6, 0x83, 0x3F, 0x66, 0x0F, 0x8C, 0x18, 0x99, 0xFF, 0x00, 0xBF, 0x65, 0x61, 0x39, 0x51,
	0x16, 0x17, 0xC7, 0xBD, 0x1D, 0xCA, 0x5A, 0x96, 0x24, 0x91, 0xEB, 0xC2, 0x2C, 0xFE, 0x61, 0xB3,
	0x68, 0x26, 0x8F, 0xF2, 0x07, 0x90, 0x85, 0x5B, 0xAD, 0xE5, 0x36, 0x63, 0xD9, 0x9F, 0xF0, 0xA5,
	0x8E, 0x22, 0x3F, 0x13, 0xA6, 0x86, 0xB6, 0xD6, 0x59, 0xB4, 0xED, 0xF3, 0x0D, 0x28, 0x10, 0x99,
	0x14, 0xA1, 0xEC, 0x54, 0x60, 0x43, 0x4B, 0x1F, 0x95, 0x8D, 0xF9, 0x7F, 0x92, 0xC4, 0x6B, 0x95,
	0xF3, 0x5A, 0x3E, 0x47, 0xE6, 0xFB, 0x4D, 0xA3, 0x96, 0x11, 0x25, 0x3E, 0x89, 0x3A, 0xA7, 0xE0,
	0x11, 0x48, 0xC3, 0x0C, 0x0B, 0x9D, 0x9E, 0x5F, 0x6C, 0x6C, 0x15, 0x2F, 0xFD, 0x89, 0x7E, 0x7D,
	0xC4, 0xE1, 0xF6, 0xAA, 0xAC, 0x73, 0x72, 0x06, 0x2F, 0x15, 0xAF, 0xA2, 0xCA, 0xCD, 0x18, 0x98,
	0xB7, 0x87, 0xB2, 0x8C, 0xE4, 0xA0, 0x2B, 0xC3, 0x84, 0xEF, 0x6F, 0xCF, 0x81, 0x6F, 0x5D, 0x80,
	0x7F, 0xAF, 0xD6, 0x7E, 0xFE, 0x8A, 0x0A, 0x39, 0xC5, 0x7C, 0xA5, 0x4B, 0x52, 0xDC, 0x78, 0x8F,
	0x21, 0xD4, 0x6E, 0x66, 0x82, 0xAC, 0x05, 0xC8, 0x79, 0x3B, 0x5C, 0x0A, 0xCC, 0x50, 0x87, 0x49,
	0x4A, 0x0B, 0x44, 0xE2, 0xA1, 0x5E, 0xAE, 0x2A, 0xEF, 0x25, 0x5F, 0x5C, 0x43, 0x64, 0x06, 0xDB,
	0x77, 0x01, 0x57, 0x3C, 0xC0, 0xF6, 0x9D, 0xEE, 0xF1, 0x31, 0x6A, 0x9B, 0xBC, 0x6B, 0x4E, 0xEC,
	0x7A, 0xA8, 0x58, 0x92, 0x75, 0xFA, 0x63, 0xB6, 0xDD, 0xC1, 0x4F, 0x85, 0x08, 0x52, 0xB4, 0x67,
	0xA0, 0x1C, 0x01, 0xD5, 0x71, 0x27, 0x1F, 0xFD, 0x8A, 0x72, 0xB0, 0x4C, 0x34, 0x93, 0x80, 0x75,
	0xD0, 0xAD, 0xCD, 0xF8, 0xF5, 0x79, 0x47, 0xD7, 0x54, 0xA7, 0xD3, 0xEB, 0xA3, 0x53, 0xCF, 0x78,
	0xEE, 0xF9, 0xBE, 0xE6, 0xDC, 0x1B, 0x17, 0x36, 0x1B, 0x9E, 0x41, 0x20, 0xE0, 0xB9, 0x3D, 0xCB,
	0x19, 0x9A, 0xA4, 0x14, 0x45, 0xDF, 0x7B, 0x69, 0x5E, 0x70, 0x33, 0x84, 0x38, 0xD0, 0xD1, 0x41,
	0x8B, 0x00, 0xD2, 0x02, 0x42, 0x76, 0xBF, 0x30, 0x1A, 0x8E, 0x76, 0xB1, 0x04, 0xE4, 0x7D, 0xB7,
	0xC6, 0xB0, 0x26, 0xC7, 0x1C, 0xC9, 0x0E, 0xB5, 0x88, 0x23, 0xA9, 0x38, 0x53, 0x81, 0xB3, 0xDA,
	0xE7, 0xD9, 0xD8, 0x4E, 0xD7, 0xFC, 0x97, 0xE9, 0x86, 0xBA, 0xF8, 0xA4, 0x09, 0x0D, 0xC2, 0x2B,
	0x67, 0xBE, 0x70, 0x1D, 0x91, 0x03, 0x12, 0x35, 0xCE, 0x7A, 0x4C, 0x2C, 0xB9, 0x62, 0xE8, 0xD8,
	0xF2, 0xE7, 0xDB, 0x19, 0x02, 0x09, 0xB5, 0x45, 0x9F, 0x59, 0x0C, 0x55, 0x9B, 0xB8, 0x7C, 0x94,
	0xF4, 0x4F, 0xFA, 0x9C, 0x49, 0xE8, 0x55, 0x60, 0x31, 0xF0, 0xFF, 0xB2, 0x9A, 0x71, 0x2D, 0x24,
	0xB1, 0xDD, 0xB8, 0x5D, 0xA2, 0xF1, 0x62, 0x21, 0xDA, 0x1E, 0xAB, 0x6E, 0x46, 0x82, 0x3C, 0xF5,
};

void kyretardizeDatagram(unsigned char *buf, int len, int port, int unk) {
	/*FILE *f = fopen("datas.log", "a");
	fprintf(f, "SEND: %d \n%s\n", len, DumpMem(buf, len));
	fclose(f);*/

	memcpy(encrBuffer, buf, len);

	unsigned char bChecksum = 0;
	for (int i = 0; i < len; i++) {
		unsigned char bData = buf[i];
		bData &= 0xAA;
		bChecksum += bData;
	}
	encrBuffer[0] = bChecksum;

	unsigned char *buf_nocrc = &encrBuffer[1];
	memcpy(buf_nocrc, buf, len);

	unsigned char bPort = (port);
	unsigned char c = 0;
	for (int i = 0; i < len; i++) {
		unsigned char bCurByte = buf_nocrc[i];
		unsigned char bCrypt = sampEncrTable[bCurByte * 2];
		buf_nocrc[i] = bCrypt;

		if (unk) {
			c = bPort ^ bCrypt;
			buf_nocrc[i] = c;

			--unk;
		} else {
			c = unk ^ bCrypt;
			buf_nocrc[i] = bCrypt;

			unk = 1;
		}
	}
}